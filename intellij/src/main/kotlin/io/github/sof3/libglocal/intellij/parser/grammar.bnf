/*
 * libglocal
 *
 * Copyright 2018 SOFe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
	parserClass="io.github.sof3.libglocal.intellij.parser.LgcParser"
	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiPackage="io.github.sof3.libglocal.intellij.psi"
	psiImplPackage="io.github.sof3.libglocal.intellij.psi.impl"
	psiClassPrefix="Lgc"
	psiImplClassSuffix="Impl"

	elementTypeHolderClass="io.github.sof3.libglocal.intellij.parser.LgcElements"
	elementTypeClass="io.github.sof3.libglocal.intellij.parser.LgcElementType"
	tokenTypeClass="io.github.sof3.libglocal.intellij.parser.LgcTokenType"

	tokens=[
		WHITESPACE="whitespace"
		COMMENT="comment"
		INDENT="indent"
		INVALID_INDENT="<invalid indent>"
		MISSING_WHITESPACE="<whitespace missing>"
		INVALID_CLOSE_BRACE="<invalid }>"
	]
	generate=[
		tokenAccessors="yes"
	]

	psiImplUtilClass="io.github.sof3.libglocal.intellij.psi.PsiUtil"
}

private file ::= (meta_block)+ module_block (abstract_message_block)*


private meta_block ::= lang_block | version_block | author_block | require_block | use_block | math_rule_block

lang_block ::= "base"? "lang" IDENTIFIER EQUALS static_literal end_rule {
	methods=[
		langId="IDENTIFIER"
		langName="literal"
	]
}

version_block ::= "version" IDENTIFIER end_rule {
	methods=[
		versionName="IDENTIFIER"
	]
}

author_block ::= "author" EQUALS static_literal end_rule {
	methods=[
		authorName="literal"
	]
}

require_block ::= "require" IDENTIFIER end_rule {
	methods=[
		target="IDENTIFIER"
	]
}

use_block ::= "use" IDENTIFIER IDENTIFIER end_rule {
	methods=[
		target="IDENTIFIER[0]"
		alias="IDENTIFIER[1]"
	]
}

math_rule_block ::= MATH_AT? (MATH_AT | IDENTIFIER)? arithmetic_predicate* end_rule {
	methods=[
		restriction="MATH_AT[1]"
		ruleName="IDENTIFIER"
	]
}
arithmetic_predicate ::= MATH_SEPARATOR (MATH_MOD NUMBER)? math_comparator NUMBER {
	methods=[
		mod="NUMBER[0]"
		comparator="math comparator"
		operand="NUMBER[1]"
	]
}
math_comparator ::= MATH_EQ | MATH_NE | MATH_LE | MATH_LT | MATH_GE | MATH_GT

module_block ::= "module" IDENTIFIER end_rule {
	methods=[
		module="IDENTIFIER"
	]
}

private abstract_message_block ::= message_group | message_block
message_group ::= FLAG* IDENTIFIER EQUALS? end_rule (INDENT_INCREASE abstract_message_block INDENT_DECREASE)? {
	methods=[
		groupId="IDENTIFIER"
	]
}
message_block ::= FLAG* IDENTIFIER EQUALS full_literal end_rule (INDENT_INCREASE message_modifier* INDENT_DECREASE)? {
	methods=[
		messageId="IDENTIFIER"
	]
}

private message_modifier ::= (arg_modifier | doc_modifier | version_modifier)

private arg_like_block ::= MOD_ARG IDENTIFIER FLAG* IDENTIFIER? (EQUALS attribute_value)? end_rule (INDENT_INCREASE arg_constraint* INDENT_DECREASE)? {
	methods=[
		argName="IDENTIFIER[0]"
		typeFlags="FLAG"
		argType="IDENTIFIER[1]"
		default="attribute value"
	]
}

arg_modifier ::= arg_like_block

private arg_constraint ::= arg_field | arg_doc
arg_field ::= arg_like_block
arg_doc ::= MOD_DOC full_literal? end_rule {
	methods=[
		literal="literal"
	]
}

doc_modifier ::= MOD_DOC full_literal? end_rule {
	methods=[
		literal="literal"
	]
}

version_modifier ::= MOD_VERSION IDENTIFIER end_rule {
	methods=[
		target="IDENTIFIER"
	]
}

static_literal ::= static_literal_component+
private static_literal_component ::= LITERAL_STRING | LITERAL_ESCAPE | CONT_NEWLINE | CONT_SPACE | CONT_CONCAT
full_literal ::= literal_component+
private literal_component ::= static_literal_component | span_component | arg_ref_component | message_ref_component
span_component ::= SPAN_START SPAN_NAME full_literal CLOSE_BRACE
arg_ref_component ::= ARG_REF_START IDENTIFIER attribute_rule* CLOSE_BRACE {
	methods=[
		argName="IDENTIFIER"
	]
}
message_ref_component ::= MESSAGE_REF_START MOD_ARG? IDENTIFIER attribute_rule* CLOSE_BRACE {
	methods=[
		dynamic="MOD_ARG"
		messageId="IDENTIFIER"
	]
}

attribute_rule ::= IDENTIFIER EQUALS attribute_value {
	methods=[
		attributeName="IDENTIFIER"
	]
}
attribute_value ::= literal_attribute_value | number_attribute_value | argument_attribute_value | message_attribute_value
literal_attribute_value ::= OPEN_BRACE full_literal CLOSE_BRACE
number_attribute_value ::= NUMBER
argument_attribute_value ::= IDENTIFIER
message_attribute_value ::= ATTRIBUTE_SIMPLE_MESSAGE IDENTIFIER

private end_rule ::= EOL | <<eof>>
