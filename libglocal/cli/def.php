<?php

/*
 * libglocal
 *
 * Copyright (C) 2018 SOFe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare(strict_types=1);

use SOFe\Libglocal\Libglocal;

require_once __DIR__ . "/../cli-autoload.php";

if(!isset($argv[4])){
	throw new InvalidArgumentException(/** @lang text */
		"Usage: php $argv[0] def <base yml file> <src> <fqn> [eol lf|crlf] [spaces <indent size>] [struct \"interface|([abstract|final] class)\"]");
}
$file = $argv[2];
if(!is_file($file)){
	throw new InvalidArgumentException("$file is not a file");
}

$yaml = yaml_parse(file_get_contents($argv[2]));

if(!is_array($yaml)){
	echo "YAML parse error\n";
	exit(1);
}

$messages = [];
function crawlMessages(string $idStack, array $array){
	global $messages;
	foreach($array as $idPart => $child){
		if(is_array($child) && !isset($child["_"])){
			crawlMessages($idStack . $idPart . ".", $child);
			continue;
		}
		if(is_string($child)){
			$messages[] = [
				"id" => $idStack . $idPart,
				"base" => $child,
				"args" => [],
				"doc" => null,
			];
			continue;
		}
		if(is_array($child)){
			$args = [];
			assert(isset($child["_"]));
			if(isset($child['$'])){
				if(is_string($child['$'])){
					$args[$child['$']] = [
						"type" => "string",
					];
				}elseif(is_array($child['$'])){
					if(Libglocal::isLinearArray($child['$'])){
						foreach($child['$'] as $arg){
							$args[$arg] = [
								"type" => "string",
							];
						}
					}else{
						foreach($child['$'] as $argName => $argValue){
							$args[$argName] = is_array($argValue) ? $argValue : [
								"type" => $argValue,
							];
						}
					}
				}
			}
			$messages[] = [
				"id" => $idStack . $idPart,
				"base" => $child["_"],
				"args" => $args,
				"doc" => $child["^"] ?? null,
			];
		}
	}
}

crawlMessages("", $yaml["messages"]);
ksort($messages);

$EOL = PHP_EOL;
$INDENT = "\t";
$STRUCT = "interface";

for($i = 5; isset($argv[$i + 1]); ++$i){
	if($argv[$i] === "eol"){
		$EOL = $argv[++$i] === "crlf" ? "\r\n" : "\n";
	}elseif($argv[$i] === "spaces"){
		$INDENT = str_repeat(" ", (int) $argv[++$i]);
	}elseif($argv[$i] === "struct"){
		$STRUCT = $argv[++$i];
	}
}

$phpFile = realpath($argv[3]) . "/" . str_replace("\\", "/", $argv[4]) . ".php";
$fqn = explode("\\", $argv[4]);
@mkdir(dirname($phpFile), 0777, true);

$php = fopen($phpFile, "wb");
fwrite($php, "<?php{$EOL}{$EOL}");
fwrite($php, "/*{$EOL}");
fwrite($php, " * libglocal message ID constant file{$EOL}");
fwrite($php, " *{$EOL}");
fwrite($php, " * This file is automatically generated by libglocal-def{$EOL}");
fwrite($php, " */{$EOL}{$EOL}");
fwrite($php, "declare(strict_types=1);{$EOL}{$EOL}");
fwrite($php, "namespace " . implode("\\", array_slice($fqn, 0, -1)) . ";{$EOL}{$EOL}");
fwrite($php, "{$STRUCT} " . array_slice($fqn, -1)[0] . "{{$EOL}");

foreach($messages as $message){
	fwrite($php, "{$INDENT}/**{$EOL}");
	if(isset($message["doc"])){
		foreach(explode("\n", $message["doc"]) as $line){
			fwrite($php, "{$INDENT} * " . trim($line) . $EOL);
		}
		fwrite($php, "{$INDENT} *{$EOL}");
	}
	fwrite($php, "{$INDENT} * <h3>Base translation</h3>{$EOL}");
	fwrite($php, "{$INDENT} * <blockquote>{$EOL}");
	foreach(explode("\n", $message["base"]) as $line){
		fwrite($php, "{$INDENT} *     <p>" . htmlspecialchars($line) . "</p>{$EOL}");
	}
	fwrite($php, "{$INDENT} * </blockquote>{$EOL}");
	if(isset($message["args"]) && !empty($message["args"])){
		fwrite($php, "{$INDENT} * <h3>Arguments:</h3>{$EOL}");
		foreach($message["args"] as $argName => $argInfo){
			fwrite($php, "{$INDENT} * - `{$argName}`: {$argInfo["type"]}</li>{$EOL}");
		}
	}
	fwrite($php, "{$INDENT} */{$EOL}");
	fwrite($php, "{$INDENT}public const " . strtoupper(preg_replace('/[^A-Za-z0-9]+/', "_", $message["id"])) . " = \"{$message["id"]}\";{$EOL}");
}

fwrite($php, "}{$EOL}");
